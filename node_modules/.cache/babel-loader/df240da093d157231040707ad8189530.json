{"ast":null,"code":"// ./src/azure-cognitiveservices-computervision.js\n\n// Azure SDK client libraries\nimport { ComputerVisionClient } from '@azure/cognitiveservices-computervision';\nimport { ApiKeyCredentials } from '@azure/ms-rest-js';\n\n// List of sample images to use in demo\nimport RandomImageUrl from './DefaultImages';\n\n// Authentication requirements\nconst key = process.env.REACT_APP_AZURE_COMPUTER_VISION_KEY;\nconst endpoint = process.env.REACT_APP_AZURE_COMPUTER_VISION_ENDPOINT;\nconsole.log(`key = ${key}`);\nconsole.log(`endpoint = ${endpoint}`);\n\n// Cognitive service features\nconst visualFeatures = [\"ImageType\", \"Faces\", \"Adult\", \"Categories\", \"Color\", \"Tags\", \"Description\", \"Objects\", \"Brands\"];\nexport const isConfigured = () => {\n  const result = key && endpoint && key.length > 0 && endpoint.length > 0 ? true : false;\n  console.log(`key = ${key}`);\n  console.log(`endpoint = ${endpoint}`);\n  console.log(`ComputerVision isConfigured = ${result}`);\n  return result;\n};\n\n// Computer Vision detected Printed Text\nconst includesText = async tags => {\n  return tags.filter(el => {\n    return el.name.toLowerCase() === \"text\";\n  });\n};\n// Computer Vision detected Handwriting\nconst includesHandwriting = async tags => {\n  return tags.filter(el => {\n    return el.name.toLowerCase() === \"handwriting\";\n  });\n};\n// Wait for text detection to succeed\nconst wait = timeout => {\n  return new Promise(resolve => {\n    setTimeout(resolve, timeout);\n  });\n};\n\n// Analyze Image from URL\nexport const computerVision = async url => {\n  // authenticate to Azure service\n  const computerVisionClient = new ComputerVisionClient(new ApiKeyCredentials({\n    inHeader: {\n      'Ocp-Apim-Subscription-Key': key\n    }\n  }), endpoint);\n\n  // get image URL - entered in form or random from Default Images\n  const urlToAnalyze = url || RandomImageUrl();\n\n  // analyze image\n  const analysis = await computerVisionClient.analyzeImage(urlToAnalyze, {\n    visualFeatures\n  });\n\n  // text detected - what does it say and where is it\n  if (includesText(analysis.tags) || includesHandwriting(analysis.tags)) {\n    analysis.text = await readTextFromURL(computerVisionClient, urlToAnalyze);\n  }\n\n  // all information about image\n  return {\n    \"URL\": urlToAnalyze,\n    ...analysis\n  };\n};\n// analyze text in image\nconst readTextFromURL = async (client, url) => {\n  var _result;\n  let result = await client.read(url);\n  let operationID = result.operationLocation.split('/').slice(-1)[0];\n\n  // Wait for read recognition to complete\n  // result.status is initially undefined, since it's the result of read\n  const start = Date.now();\n  console.log(`${start} -${(_result = result) === null || _result === void 0 ? void 0 : _result.status} `);\n  while (result.status !== \"succeeded\") {\n    var _result2;\n    await wait(500);\n    console.log(`${Date.now() - start} -${(_result2 = result) === null || _result2 === void 0 ? void 0 : _result2.status} `);\n    result = await client.getReadResult(operationID);\n  }\n\n  // Return the first page of result. \n  // Replace[0] with the desired page if this is a multi-page file such as .pdf or.tiff.\n  return result.analyzeResult;\n};","map":{"version":3,"names":["ComputerVisionClient","ApiKeyCredentials","RandomImageUrl","key","process","env","REACT_APP_AZURE_COMPUTER_VISION_KEY","endpoint","REACT_APP_AZURE_COMPUTER_VISION_ENDPOINT","console","log","visualFeatures","isConfigured","result","length","includesText","tags","filter","el","name","toLowerCase","includesHandwriting","wait","timeout","Promise","resolve","setTimeout","computerVision","url","computerVisionClient","inHeader","urlToAnalyze","analysis","analyzeImage","text","readTextFromURL","client","_result","read","operationID","operationLocation","split","slice","start","Date","now","status","_result2","getReadResult","analyzeResult"],"sources":["C:/Users/lucas/Desktop/NAC3/react-app-cognitive-services/src/azure-cognitiveservices-computervision.js"],"sourcesContent":["// ./src/azure-cognitiveservices-computervision.js\r\n\r\n// Azure SDK client libraries\r\nimport { ComputerVisionClient } from '@azure/cognitiveservices-computervision';\r\nimport { ApiKeyCredentials } from '@azure/ms-rest-js';\r\n\r\n// List of sample images to use in demo\r\nimport RandomImageUrl from './DefaultImages';\r\n\r\n// Authentication requirements\r\nconst key = process.env.REACT_APP_AZURE_COMPUTER_VISION_KEY;\r\nconst endpoint = process.env.REACT_APP_AZURE_COMPUTER_VISION_ENDPOINT;\r\n\r\nconsole.log(`key = ${key}`)\r\nconsole.log(`endpoint = ${endpoint}`)\r\n\r\n// Cognitive service features\r\nconst visualFeatures = [\r\n    \"ImageType\",\r\n    \"Faces\",\r\n    \"Adult\",\r\n    \"Categories\",\r\n    \"Color\",\r\n    \"Tags\",\r\n    \"Description\",\r\n    \"Objects\",\r\n    \"Brands\"\r\n];\r\n\r\nexport const isConfigured = () => {\r\n    const result = (key && endpoint && (key.length > 0) && (endpoint.length > 0)) ? true : false;\r\n    console.log(`key = ${key}`)\r\n    console.log(`endpoint = ${endpoint}`)\r\n    console.log(`ComputerVision isConfigured = ${result}`)\r\n    return result;\r\n}\r\n\r\n// Computer Vision detected Printed Text\r\nconst includesText = async (tags) => {\r\n    return tags.filter((el) => {\r\n        return el.name.toLowerCase() === \"text\";\r\n    });\r\n}\r\n// Computer Vision detected Handwriting\r\nconst includesHandwriting = async (tags) => {\r\n    return tags.filter((el) => {\r\n        return el.name.toLowerCase() === \"handwriting\";\r\n    });\r\n}\r\n// Wait for text detection to succeed\r\nconst wait = (timeout) => {\r\n    return new Promise(resolve => {\r\n        setTimeout(resolve, timeout);\r\n    });\r\n}\r\n\r\n// Analyze Image from URL\r\nexport const computerVision = async (url) => {\r\n\r\n    // authenticate to Azure service\r\n    const computerVisionClient = new ComputerVisionClient(\r\n        new ApiKeyCredentials({ inHeader: { 'Ocp-Apim-Subscription-Key': key } }), endpoint);\r\n\r\n    // get image URL - entered in form or random from Default Images\r\n    const urlToAnalyze = url || RandomImageUrl();\r\n    \r\n    // analyze image\r\n    const analysis = await computerVisionClient.analyzeImage(urlToAnalyze, { visualFeatures });\r\n\r\n    // text detected - what does it say and where is it\r\n    if (includesText(analysis.tags) || includesHandwriting(analysis.tags)) {\r\n        analysis.text = await readTextFromURL(computerVisionClient, urlToAnalyze);\r\n    }\r\n\r\n    // all information about image\r\n    return { \"URL\": urlToAnalyze, ...analysis};\r\n}\r\n// analyze text in image\r\nconst readTextFromURL = async (client, url) => {\r\n    \r\n    let result = await client.read(url);\r\n    let operationID = result.operationLocation.split('/').slice(-1)[0];\r\n\r\n    // Wait for read recognition to complete\r\n    // result.status is initially undefined, since it's the result of read\r\n    const start = Date.now();\r\n    console.log(`${start} -${result?.status} `);\r\n    \r\n    while (result.status !== \"succeeded\") {\r\n        await wait(500);\r\n        console.log(`${Date.now() - start} -${result?.status} `);\r\n        result = await client.getReadResult(operationID);\r\n    }\r\n    \r\n    // Return the first page of result. \r\n    // Replace[0] with the desired page if this is a multi-page file such as .pdf or.tiff.\r\n    return result.analyzeResult; \r\n}"],"mappings":"AAAA;;AAEA;AACA,SAASA,oBAAoB,QAAQ,yCAAyC;AAC9E,SAASC,iBAAiB,QAAQ,mBAAmB;;AAErD;AACA,OAAOC,cAAc,MAAM,iBAAiB;;AAE5C;AACA,MAAMC,GAAG,GAAGC,OAAO,CAACC,GAAG,CAACC,mCAAmC;AAC3D,MAAMC,QAAQ,GAAGH,OAAO,CAACC,GAAG,CAACG,wCAAwC;AAErEC,OAAO,CAACC,GAAG,CAAC,SAASP,GAAG,EAAE,CAAC;AAC3BM,OAAO,CAACC,GAAG,CAAC,cAAcH,QAAQ,EAAE,CAAC;;AAErC;AACA,MAAMI,cAAc,GAAG,CACnB,WAAW,EACX,OAAO,EACP,OAAO,EACP,YAAY,EACZ,OAAO,EACP,MAAM,EACN,aAAa,EACb,SAAS,EACT,QAAQ,CACX;AAED,OAAO,MAAMC,YAAY,GAAGA,CAAA,KAAM;EAC9B,MAAMC,MAAM,GAAIV,GAAG,IAAII,QAAQ,IAAKJ,GAAG,CAACW,MAAM,GAAG,CAAE,IAAKP,QAAQ,CAACO,MAAM,GAAG,CAAE,GAAI,IAAI,GAAG,KAAK;EAC5FL,OAAO,CAACC,GAAG,CAAC,SAASP,GAAG,EAAE,CAAC;EAC3BM,OAAO,CAACC,GAAG,CAAC,cAAcH,QAAQ,EAAE,CAAC;EACrCE,OAAO,CAACC,GAAG,CAAC,iCAAiCG,MAAM,EAAE,CAAC;EACtD,OAAOA,MAAM;AACjB,CAAC;;AAED;AACA,MAAME,YAAY,GAAG,MAAOC,IAAI,IAAK;EACjC,OAAOA,IAAI,CAACC,MAAM,CAAEC,EAAE,IAAK;IACvB,OAAOA,EAAE,CAACC,IAAI,CAACC,WAAW,CAAC,CAAC,KAAK,MAAM;EAC3C,CAAC,CAAC;AACN,CAAC;AACD;AACA,MAAMC,mBAAmB,GAAG,MAAOL,IAAI,IAAK;EACxC,OAAOA,IAAI,CAACC,MAAM,CAAEC,EAAE,IAAK;IACvB,OAAOA,EAAE,CAACC,IAAI,CAACC,WAAW,CAAC,CAAC,KAAK,aAAa;EAClD,CAAC,CAAC;AACN,CAAC;AACD;AACA,MAAME,IAAI,GAAIC,OAAO,IAAK;EACtB,OAAO,IAAIC,OAAO,CAACC,OAAO,IAAI;IAC1BC,UAAU,CAACD,OAAO,EAAEF,OAAO,CAAC;EAChC,CAAC,CAAC;AACN,CAAC;;AAED;AACA,OAAO,MAAMI,cAAc,GAAG,MAAOC,GAAG,IAAK;EAEzC;EACA,MAAMC,oBAAoB,GAAG,IAAI7B,oBAAoB,CACjD,IAAIC,iBAAiB,CAAC;IAAE6B,QAAQ,EAAE;MAAE,2BAA2B,EAAE3B;IAAI;EAAE,CAAC,CAAC,EAAEI,QAAQ,CAAC;;EAExF;EACA,MAAMwB,YAAY,GAAGH,GAAG,IAAI1B,cAAc,CAAC,CAAC;;EAE5C;EACA,MAAM8B,QAAQ,GAAG,MAAMH,oBAAoB,CAACI,YAAY,CAACF,YAAY,EAAE;IAAEpB;EAAe,CAAC,CAAC;;EAE1F;EACA,IAAII,YAAY,CAACiB,QAAQ,CAAChB,IAAI,CAAC,IAAIK,mBAAmB,CAACW,QAAQ,CAAChB,IAAI,CAAC,EAAE;IACnEgB,QAAQ,CAACE,IAAI,GAAG,MAAMC,eAAe,CAACN,oBAAoB,EAAEE,YAAY,CAAC;EAC7E;;EAEA;EACA,OAAO;IAAE,KAAK,EAAEA,YAAY;IAAE,GAAGC;EAAQ,CAAC;AAC9C,CAAC;AACD;AACA,MAAMG,eAAe,GAAG,MAAAA,CAAOC,MAAM,EAAER,GAAG,KAAK;EAAA,IAAAS,OAAA;EAE3C,IAAIxB,MAAM,GAAG,MAAMuB,MAAM,CAACE,IAAI,CAACV,GAAG,CAAC;EACnC,IAAIW,WAAW,GAAG1B,MAAM,CAAC2B,iBAAiB,CAACC,KAAK,CAAC,GAAG,CAAC,CAACC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;;EAElE;EACA;EACA,MAAMC,KAAK,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC;EACxBpC,OAAO,CAACC,GAAG,CAAC,GAAGiC,KAAK,MAAAN,OAAA,GAAKxB,MAAM,cAAAwB,OAAA,uBAANA,OAAA,CAAQS,MAAM,GAAG,CAAC;EAE3C,OAAOjC,MAAM,CAACiC,MAAM,KAAK,WAAW,EAAE;IAAA,IAAAC,QAAA;IAClC,MAAMzB,IAAI,CAAC,GAAG,CAAC;IACfb,OAAO,CAACC,GAAG,CAAC,GAAGkC,IAAI,CAACC,GAAG,CAAC,CAAC,GAAGF,KAAK,MAAAI,QAAA,GAAKlC,MAAM,cAAAkC,QAAA,uBAANA,QAAA,CAAQD,MAAM,GAAG,CAAC;IACxDjC,MAAM,GAAG,MAAMuB,MAAM,CAACY,aAAa,CAACT,WAAW,CAAC;EACpD;;EAEA;EACA;EACA,OAAO1B,MAAM,CAACoC,aAAa;AAC/B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module"}