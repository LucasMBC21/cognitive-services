{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\nimport { __awaiter, __extends, __generator } from \"tslib\";\nimport { BaseRequestPolicy } from \"./requestPolicy\";\nimport { Constants } from \"../util/constants\";\nimport { delay } from \"../util/utils\";\nvar StatusCodes = Constants.HttpConstants.StatusCodes;\nvar DEFAULT_RETRY_COUNT = 3;\nexport function throttlingRetryPolicy(maxRetries) {\n  if (maxRetries === void 0) {\n    maxRetries = DEFAULT_RETRY_COUNT;\n  }\n  return {\n    create: function (nextPolicy, options) {\n      return new ThrottlingRetryPolicy(nextPolicy, options, maxRetries);\n    }\n  };\n}\n/**\n * To learn more, please refer to\n * https://docs.microsoft.com/en-us/azure/azure-resource-manager/resource-manager-request-limits,\n * https://docs.microsoft.com/en-us/azure/azure-subscription-service-limits and\n * https://docs.microsoft.com/en-us/azure/virtual-machines/troubleshooting/troubleshooting-throttling-errors\n */\nvar ThrottlingRetryPolicy = /** @class */function (_super) {\n  __extends(ThrottlingRetryPolicy, _super);\n  function ThrottlingRetryPolicy(nextPolicy, options, retryLimit) {\n    var _this = _super.call(this, nextPolicy, options) || this;\n    _this.retryLimit = retryLimit;\n    return _this;\n  }\n  ThrottlingRetryPolicy.prototype.sendRequest = function (httpRequest) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _this = this;\n      return __generator(this, function (_a) {\n        return [2 /*return*/, this._nextPolicy.sendRequest(httpRequest.clone()).then(function (response) {\n          return _this.retry(httpRequest, response, 0);\n        })];\n      });\n    });\n  };\n  ThrottlingRetryPolicy.prototype.retry = function (httpRequest, httpResponse, retryCount) {\n    return __awaiter(this, void 0, void 0, function () {\n      var retryAfterHeader, delayInMs, res;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (httpResponse.status !== StatusCodes.TooManyRequests) {\n              return [2 /*return*/, httpResponse];\n            }\n            retryAfterHeader = httpResponse.headers.get(Constants.HeaderConstants.RETRY_AFTER);\n            if (!(retryAfterHeader && retryCount < this.retryLimit)) return [3 /*break*/, 3];\n            delayInMs = ThrottlingRetryPolicy.parseRetryAfterHeader(retryAfterHeader);\n            if (!delayInMs) return [3 /*break*/, 3];\n            return [4 /*yield*/, delay(delayInMs)];\n          case 1:\n            _a.sent();\n            return [4 /*yield*/, this._nextPolicy.sendRequest(httpRequest)];\n          case 2:\n            res = _a.sent();\n            return [2 /*return*/, this.retry(httpRequest, res, retryCount + 1)];\n          case 3:\n            return [2 /*return*/, httpResponse];\n        }\n      });\n    });\n  };\n  ThrottlingRetryPolicy.parseRetryAfterHeader = function (headerValue) {\n    var retryAfterInSeconds = Number(headerValue);\n    if (Number.isNaN(retryAfterInSeconds)) {\n      return ThrottlingRetryPolicy.parseDateRetryAfterHeader(headerValue);\n    } else {\n      return retryAfterInSeconds * 1000;\n    }\n  };\n  ThrottlingRetryPolicy.parseDateRetryAfterHeader = function (headerValue) {\n    try {\n      var now = Date.now();\n      var date = Date.parse(headerValue);\n      var diff = date - now;\n      return Number.isNaN(diff) ? undefined : diff;\n    } catch (error) {\n      return undefined;\n    }\n  };\n  return ThrottlingRetryPolicy;\n}(BaseRequestPolicy);\nexport { ThrottlingRetryPolicy };","map":{"version":3,"names":["BaseRequestPolicy","Constants","delay","StatusCodes","HttpConstants","DEFAULT_RETRY_COUNT","throttlingRetryPolicy","maxRetries","create","nextPolicy","options","ThrottlingRetryPolicy","_super","__extends","retryLimit","_this","call","prototype","sendRequest","httpRequest","_nextPolicy","clone","then","response","retry","httpResponse","retryCount","status","TooManyRequests","retryAfterHeader","headers","get","HeaderConstants","RETRY_AFTER","delayInMs","parseRetryAfterHeader","_a","sent","res","headerValue","retryAfterInSeconds","Number","isNaN","parseDateRetryAfterHeader","now","Date","date","parse","diff","undefined","error"],"sources":["../../../lib/policies/throttlingRetryPolicy.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}