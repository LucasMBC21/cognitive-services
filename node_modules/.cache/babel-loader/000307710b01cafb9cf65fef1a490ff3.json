{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\nimport { HttpHeaders } from \"../httpHeaders\";\n/**\n * Authenticates to a service using an API key.\n */\nvar ApiKeyCredentials = /** @class */function () {\n  /**\n   * @constructor\n   * @param {object} options   Specifies the options to be provided for auth. Either header or query needs to be provided.\n   */\n  function ApiKeyCredentials(options) {\n    if (!options || options && !options.inHeader && !options.inQuery) {\n      throw new Error(\"options cannot be null or undefined. Either \\\"inHeader\\\" or \\\"inQuery\\\" property of the options object needs to be provided.\");\n    }\n    this.inHeader = options.inHeader;\n    this.inQuery = options.inQuery;\n  }\n  /**\n   * Signs a request with the values provided in the inHeader and inQuery parameter.\n   *\n   * @param {WebResource} webResource The WebResource to be signed.\n   * @returns {Promise<WebResource>} The signed request object.\n   */\n  ApiKeyCredentials.prototype.signRequest = function (webResource) {\n    if (!webResource) {\n      return Promise.reject(new Error(\"webResource cannot be null or undefined and must be of type \\\"object\\\".\"));\n    }\n    if (this.inHeader) {\n      if (!webResource.headers) {\n        webResource.headers = new HttpHeaders();\n      }\n      for (var headerName in this.inHeader) {\n        webResource.headers.set(headerName, this.inHeader[headerName]);\n      }\n    }\n    if (this.inQuery) {\n      if (!webResource.url) {\n        return Promise.reject(new Error(\"url cannot be null in the request object.\"));\n      }\n      if (webResource.url.indexOf(\"?\") < 0) {\n        webResource.url += \"?\";\n      }\n      for (var key in this.inQuery) {\n        if (!webResource.url.endsWith(\"?\")) {\n          webResource.url += \"&\";\n        }\n        webResource.url += key + \"=\" + this.inQuery[key];\n      }\n    }\n    return Promise.resolve(webResource);\n  };\n  return ApiKeyCredentials;\n}();\nexport { ApiKeyCredentials };","map":{"version":3,"names":["HttpHeaders","ApiKeyCredentials","options","inHeader","inQuery","Error","prototype","signRequest","webResource","Promise","reject","headers","headerName","set","url","indexOf","key","endsWith","resolve"],"sources":["../../../lib/credentials/apiKeyCredentials.ts"],"sourcesContent":[null],"mappings":"AAAA;AACA;AAEA,SAASA,WAAW,QAAQ,gBAAgB;AAmB5C;;;AAGA,IAAAC,iBAAA;EAUE;;;;EAIA,SAAAA,kBAAYC,OAAgC;IAC1C,IAAI,CAACA,OAAO,IAAKA,OAAO,IAAI,CAACA,OAAO,CAACC,QAAQ,IAAI,CAACD,OAAO,CAACE,OAAQ,EAAE;MAClE,MAAM,IAAIC,KAAK,CACb,8HAA0H,CAC3H;;IAEH,IAAI,CAACF,QAAQ,GAAGD,OAAO,CAACC,QAAQ;IAChC,IAAI,CAACC,OAAO,GAAGF,OAAO,CAACE,OAAO;EAChC;EAEA;;;;;;EAMAH,iBAAA,CAAAK,SAAA,CAAAC,WAAW,GAAX,UAAYC,WAA4B;IACtC,IAAI,CAACA,WAAW,EAAE;MAChB,OAAOC,OAAO,CAACC,MAAM,CACnB,IAAIL,KAAK,CAAC,yEAAuE,CAAC,CACnF;;IAGH,IAAI,IAAI,CAACF,QAAQ,EAAE;MACjB,IAAI,CAACK,WAAW,CAACG,OAAO,EAAE;QACxBH,WAAW,CAACG,OAAO,GAAG,IAAIX,WAAW,EAAE;;MAEzC,KAAK,IAAMY,UAAU,IAAI,IAAI,CAACT,QAAQ,EAAE;QACtCK,WAAW,CAACG,OAAO,CAACE,GAAG,CAACD,UAAU,EAAE,IAAI,CAACT,QAAQ,CAACS,UAAU,CAAC,CAAC;;;IAIlE,IAAI,IAAI,CAACR,OAAO,EAAE;MAChB,IAAI,CAACI,WAAW,CAACM,GAAG,EAAE;QACpB,OAAOL,OAAO,CAACC,MAAM,CAAC,IAAIL,KAAK,CAAC,2CAA2C,CAAC,CAAC;;MAE/E,IAAIG,WAAW,CAACM,GAAG,CAACC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE;QACpCP,WAAW,CAACM,GAAG,IAAI,GAAG;;MAExB,KAAK,IAAME,GAAG,IAAI,IAAI,CAACZ,OAAO,EAAE;QAC9B,IAAI,CAACI,WAAW,CAACM,GAAG,CAACG,QAAQ,CAAC,GAAG,CAAC,EAAE;UAClCT,WAAW,CAACM,GAAG,IAAI,GAAG;;QAExBN,WAAW,CAACM,GAAG,IAAOE,GAAG,SAAI,IAAI,CAACZ,OAAO,CAACY,GAAG,CAAG;;;IAIpD,OAAOP,OAAO,CAACS,OAAO,CAACV,WAAW,CAAC;EACrC,CAAC;EACH,OAAAP,iBAAC;AAAD,CAAC,CA/DD","ignoreList":[]},"metadata":{},"sourceType":"module"}